import unittest
import os
from collections import OrderedDict
import datetime

try:
    from sb_cfn_package import SbCfnPackage, cli
except:
    from sb_cfn_package.sb_cfn_package import SbCfnPackage, cli
try:
    from aws_servicebroker_spec import AwsServiceBrokerSpec, AwsServiceBrokerSpecException
except:
    from sb_cfn_package.aws_servicebroker_spec import AwsServiceBrokerSpec, AwsServiceBrokerSpecException


sample_artifact = {'apb_spec': OrderedDict([('version', 1.0), ('name', 'sqs-apb'), ('metadata', OrderedDict([('displayName', 'Amazon SQS (APB)'), ('longDescription', 'Amazon Simple Queue Service (Amazon SQS) is a fully managed message queuing service that makes it easy to decouple and scale microservices, distributed systems, and serverless applications. Amazon SQS moves data between distributed application components and helps you decouple these components.'), ('imageUrl', 'https://s3.amazonaws.com/thp-aws-icons-dev/Messaging_AmazonSQS_LARGE.png'), ('documentationUrl', 'https://aws.amazon.com/documentation/sqs/'), ('providerDisplayName', 'Amazon Web Services')])), ('async', 'optional'), ('bindable', True), ('description', 'Best Practice SQS Standard Queue.'), ('tags', ['AWS']), ('plans', [OrderedDict([('name', 'default'), ('metadata', {'displayName': 'Standard', 'longDescription': 'Standard SQS APB', 'cost': 'https://aws.amazon.com/sqs/pricing/'}), ('description', 'Managed SQS Queue (Standard)'), ('free', False), ('parameters', [{'name': 'aws_access_key', 'required': True, 'title': 'AWS Access Key', 'description': 'AWS Access Key to authenticate to AWS with.', 'type': 'string', 'display_group': 'AWS Account Information'}, {'name': 'aws_secret_key', 'required': True, 'title': 'AWS Secret Key', 'description': 'AWS Secret Key to authenticate to AWS with.', 'type': 'string', 'display_type': 'password', 'display_group': 'AWS Account Information'}, {'name': 'aws_cloudformation_role_arn', 'required': True, 'title': 'AWS Cloudformation role ARN', 'description': 'IAM role ARN for use as Cloudformation Stack Role.', 'type': 'string', 'display_group': 'AWS Account Information'}, {'name': 'region', 'title': 'AWS Region', 'description': 'AWS Region to create RDS instance in.', 'type': 'enum', 'enum': ['ap-northeast-1', 'ap-northeast-2', 'ap-south-1', 'ap-southeast-1', 'ap-southeast-2', 'ca-central-1', 'eu-central-1', 'eu-west-1', 'eu-west-2', 'sa-east-1', 'us-east-1', 'us-east-2', 'us-west-1', 'us-west-2'], 'default': 'us-west-2', 'display_group': 'AWS Account Information'}, OrderedDict([('name', 'AvailabilityZones'), ('description', 'list of availability zones to use, must be the same quantity as specified in NumberOfAvailabilityZones'), ('type', 'CommaDelimitedList'), ('default', 'Auto'), ('required', True)]), OrderedDict([('name', 'CidrBlocks'), ('description', 'comma seperated list of CIDR blocks to place ElastiCache into, must be the same quantity as specified in NumberOfAvailabilityZones. If auto is specified unused cidr space in the vpc will be used'), ('type', 'CommaDelimitedList'), ('default', 'Auto'), ('required', True)]), OrderedDict([('name', 'CidrSize'), ('description', 'Size of Cidr block to allocate if CidrBlocks is set to Auto.'), ('type', 'string'), ('default', 26), ('required', True)]), OrderedDict([('name', 'NumberOfAvailabilityZones'), ('description', 'Quantity of subnets to use, if selecting more than 2 the region this stack is in must have at least that many Availability Zones'), ('type', 'string'), ('default', 'Auto'), ('required', True)]), OrderedDict([('name', 'VpcId'), ('description', 'The ID of the VPC to launch the Memcache cluster into'), ('type', 'AWS::EC2::VPC::Id'), ('required', True)]), OrderedDict([('name', 'UsedeadletterQueue'), ('description', "A dead-letter queue is a queue that other (source) queues can target for messages that can't be processed (consumed) successfully. You can set aside and isolate these messages in the dead-letter queue to determine why their processing doesn't succeed."), ('type', 'string'), ('required', False)]), OrderedDict([('name', 'VisibilityTimeout'), ('description', 'This should be longer than the time it would take to process and delete a message, this should not exceed 12 hours.'), ('type', 'int'), ('default', 5), ('required', True)])])]), OrderedDict([('name', 'custom'), ('metadata', {'displayName': 'Custom', 'longDescription': 'Custom SQS APB', 'cost': 'https://aws.amazon.com/sqs/pricing/'}), ('description', 'Managed SQS Queue (Custom)'), ('free', False), ('parameters', [{'name': 'aws_access_key', 'required': True, 'title': 'AWS Access Key', 'description': 'AWS Access Key to authenticate to AWS with.', 'type': 'string', 'display_group': 'AWS Account Information'}, {'name': 'aws_secret_key', 'required': True, 'title': 'AWS Secret Key', 'description': 'AWS Secret Key to authenticate to AWS with.', 'type': 'string', 'display_type': 'password', 'display_group': 'AWS Account Information'}, {'name': 'aws_cloudformation_role_arn', 'required': True, 'title': 'AWS Cloudformation role ARN', 'description': 'IAM role ARN for use as Cloudformation Stack Role.', 'type': 'string', 'display_group': 'AWS Account Information'}, {'name': 'region', 'title': 'AWS Region', 'description': 'AWS Region to create RDS instance in.', 'type': 'enum', 'enum': ['ap-northeast-1', 'ap-northeast-2', 'ap-south-1', 'ap-southeast-1', 'ap-southeast-2', 'ca-central-1', 'eu-central-1', 'eu-west-1', 'eu-west-2', 'sa-east-1', 'us-east-1', 'us-east-2', 'us-west-1', 'us-west-2'], 'default': 'us-west-2', 'display_group': 'AWS Account Information'}, OrderedDict([('name', 'AvailabilityZones'), ('description', 'list of availability zones to use, must be the same quantity as specified in NumberOfAvailabilityZones'), ('type', 'CommaDelimitedList'), ('default', 'Auto'), ('required', True)]), OrderedDict([('name', 'CidrBlocks'), ('description', 'comma seperated list of CIDR blocks to place ElastiCache into, must be the same quantity as specified in NumberOfAvailabilityZones. If auto is specified unused cidr space in the vpc will be used'), ('type', 'CommaDelimitedList'), ('default', 'Auto'), ('required', True)]), OrderedDict([('name', 'CidrSize'), ('description', 'Size of Cidr block to allocate if CidrBlocks is set to Auto.'), ('type', 'string'), ('default', 26), ('required', True)]), OrderedDict([('name', 'NumberOfAvailabilityZones'), ('description', 'Quantity of subnets to use, if selecting more than 2 the region this stack is in must have at least that many Availability Zones'), ('type', 'string'), ('default', 'Auto'), ('required', True)]), OrderedDict([('name', 'VpcId'), ('description', 'The ID of the VPC to launch the Memcache cluster into'), ('type', 'AWS::EC2::VPC::Id'), ('required', True)]), OrderedDict([('name', 'DelaySeconds'), ('description', 'The time in seconds that the delivery of all messages in the queue is delayed.'), ('type', 'int'), ('default', 5), ('title', 'Delay Seconds'), ('display_group', 'SQS Configuration'), ('required', True)]), OrderedDict([('name', 'MaximumMessageSize'), ('type', 'int'), ('description', 'The limit of how many bytes that a message can contain before Amazon SQS rejects it, 1024 bytes (1 KiB) to 262144 bytes (256 KiB)'), ('default', 262144), ('display_group', 'SQS Configuration'), ('required', True)]), OrderedDict([('name', 'MessageRetentionPeriod'), ('description', 'The number of seconds that Amazon SQS retains a message. You can specify an integer value from 60 seconds (1 minute) to 1209600 seconds (14 days).'), ('type', 'int'), ('default', 345600), ('display_group', 'SQS Configuration'), ('required', True)]), OrderedDict([('name', 'ReceiveMessageWaitTimeSeconds'), ('description', 'Specifies the duration, in seconds, that the ReceiveMessage action call waits until a message is in the queue in order to include it in the response, as opposed to returning an empty response if a message is not yet available. 1 to 20'), ('type', 'int'), ('default', 0), ('required', True)]), OrderedDict([('name', 'UsedeadletterQueue'), ('description', "A dead-letter queue is a queue that other (source) queues can target for messages that can't be processed (consumed) successfully. You can set aside and isolate these messages in the dead-letter queue to determine why their processing doesn't succeed."), ('type', 'string'), ('required', False)]), OrderedDict([('name', 'VisibilityTimeout'), ('description', 'This should be longer than the time it would take to process and delete a message, this should not exceed 12 hours.'), ('type', 'int'), ('default', 5), ('required', True)])])])])]), 'prescribed_parameters': {'default': OrderedDict([('DelaySeconds', 10), ('MaximumMessageSize', 262144), ('MessageRetentionPeriod', 345600), ('ReceiveMessageWaitTimeSeconds', 0)]), 'custom': {}}, 'bindings': {'CFNOutputs': ['SQSQueueUrl', 'SQSQueueArn', 'SQSQueueName', 'SQSDeadLetterQueueUrl', 'SQSDeadLetterQueueArn'], 'IAMUser': True}, 'template': OrderedDict([('AWSTemplateFormatVersion', datetime.date(2010, 9, 9)), ('Description', 'Best Practice SQS Standard Queue. qs-1nt0fs93h'), ('Metadata', OrderedDict([('AWS::ServiceBroker::Specification', OrderedDict([('Version', 1.0), ('Tags', ['AWS', 'SQS', 'message queing']), ('Name', 'sqs-apb'), ('DisplayName', 'Amazon SQS (APB)'), ('LongDescription', 'Amazon Simple Queue Service (Amazon SQS) is a fully managed message queuing service that makes it easy to decouple and scale microservices, distributed systems, and serverless applications. Amazon SQS moves data between distributed application components and helps you decouple these components.'), ('ImageUrl', 'https://s3.amazonaws.com/thp-aws-icons-dev/Messaging_AmazonSQS_LARGE.png'), ('DocumentationUrl', 'https://aws.amazon.com/documentation/sqs/'), ('ProviderDisplayName', 'Amazon Web Services'), ('Bindings', OrderedDict([('IAM', OrderedDict([('AddKeypair', True), ('Policies', [OrderedDict([('PolicyDocument', OrderedDict([('Version', '2012-10-17'), ('Statement', [OrderedDict([('Action', ['sqs:ChangeMessageVisibility', 'sqs:ChangeMessageVisibilityBatch', 'sqs:DeleteMessage', 'sqs:DeleteMessageBatch', 'sqs:ReceiveMessage', 'sqs:PurgeQueue', 'sqs:SendMessage', 'sqs:SendMessageBatch']), ('Effect', 'Allow'), ('Resource', '!GetAtt SQSQueue.Arn')])])]))]), 'arn:aws:iam::aws:policy/AmazonSQSReadOnlyAccess'])])), ('CFNOutputs', ['SQSQueueUrl', 'SQSQueueArn', 'SQSQueueName', 'SQSDeadLetterQueueUrl', 'SQSDeadLetterQueueArn'])])), ('ServicePlans', OrderedDict([('default', OrderedDict([('DisplayName', 'Standard'), ('Description', 'Managed SQS Queue (Standard)'), ('LongDescription', 'Standard SQS APB'), ('Cost', 'https://aws.amazon.com/sqs/pricing/'), ('ParameterValues', OrderedDict([('DelaySeconds', 10), ('MaximumMessageSize', 262144), ('MessageRetentionPeriod', 345600), ('ReceiveMessageWaitTimeSeconds', 0)]))])), ('custom', OrderedDict([('DisplayName', 'Custom'), ('Description', 'Managed SQS Queue (Custom)'), ('LongDescription', 'Custom SQS APB'), ('Cost', 'https://aws.amazon.com/sqs/pricing/'), ('ParameterValues', OrderedDict())]))]))])), ('AWS::CloudFormation::Interface', OrderedDict([('ParameterGroups', [OrderedDict([('Label', OrderedDict([('default', 'SQS Configuration')])), ('Parameters', ['DelaySeconds', 'MaximumMessageSize', 'MessageRetentionPeriod'])])]), ('ParameterLabels', OrderedDict([('DelaySeconds', OrderedDict([('default', 'Delay Seconds')]))]))]))])), ('Parameters', OrderedDict([('AvailabilityZones', OrderedDict([('Description', 'list of availability zones to use, must be the same quantity as specified in NumberOfAvailabilityZones'), ('Type', 'CommaDelimitedList'), ('Default', 'Auto')])), ('CidrBlocks', OrderedDict([('Description', 'comma seperated list of CIDR blocks to place ElastiCache into, must be the same quantity as specified in NumberOfAvailabilityZones. If auto is specified unused cidr space in the vpc will be used'), ('Type', 'CommaDelimitedList'), ('Default', 'Auto')])), ('CidrSize', OrderedDict([('Description', 'Size of Cidr block to allocate if CidrBlocks is set to Auto.'), ('Type', 'String'), ('Default', '26')])), ('NumberOfAvailabilityZones', OrderedDict([('Description', 'Quantity of subnets to use, if selecting more than 2 the region this stack is in must have at least that many Availability Zones'), ('Type', 'String'), ('Default', 'Auto')])), ('VpcId', OrderedDict([('Description', 'The ID of the VPC to launch the Memcache cluster into'), ('Type', 'AWS::EC2::VPC::Id')])), ('DelaySeconds', OrderedDict([('Description', 'The time in seconds that the delivery of all messages in the queue is delayed.'), ('Type', 'Number'), ('Default', '5')])), ('MaximumMessageSize', OrderedDict([('Type', 'Number'), ('Description', 'The limit of how many bytes that a message can contain before Amazon SQS rejects it, 1024 bytes (1 KiB) to 262144 bytes (256 KiB)'), ('Default', '262144')])), ('MessageRetentionPeriod', OrderedDict([('Description', 'The number of seconds that Amazon SQS retains a message. You can specify an integer value from 60 seconds (1 minute) to 1209600 seconds (14 days).'), ('Type', 'Number'), ('Default', '345600')])), ('ReceiveMessageWaitTimeSeconds', OrderedDict([('Description', 'Specifies the duration, in seconds, that the ReceiveMessage action call waits until a message is in the queue in order to include it in the response, as opposed to returning an empty response if a message is not yet available. 1 to 20'), ('Type', 'Number'), ('Default', '0')])), ('UsedeadletterQueue', OrderedDict([('Description', "A dead-letter queue is a queue that other (source) queues can target for messages that can't be processed (consumed) successfully. You can set aside and isolate these messages in the dead-letter queue to determine why their processing doesn't succeed."), ('Type', 'String'), ('Default', '')])), ('VisibilityTimeout', OrderedDict([('Description', 'This should be longer than the time it would take to process and delete a message, this should not exceed 12 hours.'), ('Type', 'Number'), ('Default', '5')]))])), ('Mappings', OrderedDict()), ('Conditions', OrderedDict([('CreateDeadLetterQueue', OrderedDict([('!Equals', ['!Ref UsedeadletterQueue', 'true'])])), ('AutoCidrs', OrderedDict([('!Equals', [OrderedDict([('!Select', [0, '!Ref CidrBlocks'])]), 'Auto'])])), ('AutoAzs', OrderedDict([('!Equals', [OrderedDict([('!Select', [0, '!Ref AvailabilityZones'])]), 'Auto'])]))])), ('Resources', OrderedDict([('SQSQueue', OrderedDict([('Type', 'AWS::SQS::Queue'), ('Properties', OrderedDict([('DelaySeconds', '!Ref DelaySeconds'), ('MaximumMessageSize', '!Ref MaximumMessageSize'), ('MessageRetentionPeriod', '!Ref MessageRetentionPeriod'), ('ReceiveMessageWaitTimeSeconds', '!Ref ReceiveMessageWaitTimeSeconds'), ('RedrivePolicy', OrderedDict([('!If', ['CreateDeadLetterQueue', OrderedDict([('deadLetterTargetArn', OrderedDict([('!GetAtt', ['MyDeadLetterQueue', 'Arn'])])), ('maxReceiveCount', 5)]), '!Ref AWS::NoValue'])])), ('VisibilityTimeout', '!Ref VisibilityTimeout')]))])), ('MyDeadLetterQueue', OrderedDict([('Condition', 'CreateDeadLetterQueue'), ('Type', 'AWS::SQS::Queue')])), ('AWSSBInjectedIAMUserRole', OrderedDict([('Type', 'AWS::IAM::Role'), ('Properties', OrderedDict([('AssumeRolePolicyDocument', OrderedDict([('Version', '2012-10-17'), ('Statement', [OrderedDict([('Effect', 'Allow'), ('Principal', OrderedDict([('Service', ['lambda.amazonaws.com'])])), ('Action', ['sts:AssumeRole'])])])])), ('Path', '/'), ('Policies', [OrderedDict([('PolicyName', 'iam_user_creation'), ('PolicyDocument', OrderedDict([('Version', '2012-10-17'), ('Statement', [OrderedDict([('Effect', 'Allow'), ('Action', ['iam:CreateAccessKey', 'iam:PutUserPolicy', 'iam:ListAttachedUserPolicies', 'iam:DeleteUserPolicy', 'iam:AttachUserPolicy', 'iam:DeleteUser', 'iam:ListUserPolicies', 'iam:DetachUserPolicy', 'iam:CreateUser', 'iam:DeleteAccessKey', 'iam:ListAccessKeys', 'ssm:DeleteParameters', 'ssm:PutParameter', 'logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents']), ('Resource', '*')])])]))])])]))])), ('AWSSBInjectedIAMUserLambda', OrderedDict([('Type', 'AWS::Lambda::Function'), ('Properties', OrderedDict([('Handler', 'index.handler'), ('Role', OrderedDict([('Fn::GetAtt', ['AWSSBInjectedIAMUserRole', 'Arn'])])), ('Code', OrderedDict([('ZipFile', "import cfnresponse\nimport random\nimport string\nimport boto3\nimport traceback\n\nalnum = string.ascii_uppercase + string.ascii_lowercase + string.digits\niam_client = boto3.client('iam')\nssm_client = boto3.client('ssm')\n\n\ndef handler(event, context):\n    response_code = cfnresponse.SUCCESS\n    response_data = {}\n    if event['RequestType'] == 'Create':\n        phys_id = ''.join(random.choice(alnum) for _ in range(16))\n    else:\n        phys_id = event['PhysicalResourceId']\n    response_data['asb-access-key-id'] = 'asb-access-key-id-%s' % phys_id\n    response_data['asb-secret-access-key'] = 'asb-secret-access-key-%s' % phys_id\n    try:\n        username = event['ResourceProperties']['Username']\n        if event['RequestType'] == 'Create':\n            response = iam_client.create_access_key(UserName=username)\n            aws_access_key_id = response['AccessKey']['AccessKeyId']\n            secret_access_key = response['AccessKey']['SecretAccessKey']\n            ssm_client.put_parameter(Name=response_data['asb-access-key-id'], Value=aws_access_key_id, Type='SecureString')\n            ssm_client.put_parameter(Name=response_data['asb-secret-access-key'], Value=secret_access_key, Type='SecureString')\n        elif event['RequestType'] == 'Update':\n            print('Update operation unsupported')\n            response_code = cfnresponse.FAILED\n        elif event['RequestType'] == 'Delete':\n            for access_key in iam_client.list_access_keys(UserName=username)['AccessKeyMetadata']:\n                iam_client.delete_access_key(UserName=username, AccessKeyId=access_key['AccessKeyId'])\n            ssm_client.delete_parameters(Names=[response_data['asb-access-key-id'], response_data['asb-secret-access-key']])\n        cfnresponse.send(event, context, response_code, response_data, phys_id)\n    except Exception as e:\n        print(str(e))\n        traceback.print_exc()\n        cfnresponse.send(event, context, cfnresponse.FAILED, response_data, phys_id)")])), ('Runtime', 'python2.7'), ('Timeout', '60')]))])), ('AWSSBInjectedIAMUser', OrderedDict([('Type', 'AWS::IAM::User'), ('Properties', OrderedDict([('ManagedPolicyArns', ['arn:aws:iam::aws:policy/AmazonSQSReadOnlyAccess'])]))])), ('AWSSBInjectedIAMUserCreator', OrderedDict([('Type', 'AWS::CloudFormation::CustomResource'), ('Properties', OrderedDict([('ServiceToken', '!GetAtt AWSSBInjectedIAMUserLambda.Arn'), ('Username', '!Ref AWSSBInjectedIAMUser')]))])), ('AWSSBInjectedIAMUserPolicy1', OrderedDict([('Type', 'AWS::IAM::Policy'), ('Properties', OrderedDict([('PolicyName', 'AWSSBInjectedIAMUserPolicy1'), ('Users', ['!Ref AWSSBInjectedIAMUser']), ('PolicyDocument', OrderedDict([('Version', '2012-10-17'), ('Statement', [OrderedDict([('Action', ['sqs:ChangeMessageVisibility', 'sqs:ChangeMessageVisibilityBatch', 'sqs:DeleteMessage', 'sqs:DeleteMessageBatch', 'sqs:ReceiveMessage', 'sqs:PurgeQueue', 'sqs:SendMessage', 'sqs:SendMessageBatch']), ('Effect', 'Allow'), ('Resource', '!GetAtt SQSQueue.Arn')])])]))]))])), ('AWSSBInjectedLambdaZipsBucket', OrderedDict([('Type', 'AWS::S3::Bucket'), ('Properties', OrderedDict([('Tags', [])]))])), ('AWSSBInjectedCopyZips', OrderedDict([('Type', 'AWS::CloudFormation::CustomResource'), ('Properties', OrderedDict([('ServiceToken', '!GetAtt AWSSBInjectedCopyZipsLambda.Arn'), ('DestBucket', '!Ref AWSSBInjectedLambdaZipsBucket'), ('SourceBucket', 'awsservicebroker-assets-421940136121qku3cglg'), ('Prefix', ''), ('Objects', ['get_cidrs/lambda_function.zip', 'get_azs/lambda_function.zip'])]))])), ('AWSSBInjectedCopyZipsRole', OrderedDict([('Type', 'AWS::IAM::Role'), ('Properties', OrderedDict([('AssumeRolePolicyDocument', OrderedDict([('Version', datetime.date(2012, 10, 17)), ('Statement', [OrderedDict([('Effect', 'Allow'), ('Principal', OrderedDict([('Service', 'lambda.amazonaws.com')])), ('Action', 'sts:AssumeRole')])])])), ('ManagedPolicyArns', ['arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole']), ('Path', '/'), ('Policies', [OrderedDict([('PolicyName', 'lambda-copier'), ('PolicyDocument', OrderedDict([('Version', datetime.date(2012, 10, 17)), ('Statement', [OrderedDict([('Effect', 'Allow'), ('Action', ['s3:GetObject']), ('Resource', ['arn:aws:s3:::awsservicebroker-assets-421940136121qku3cglg/*'])]), OrderedDict([('Effect', 'Allow'), ('Action', ['s3:PutObject', 's3:DeleteObject']), ('Resource', ['!Sub arn:aws:s3:::${AWSSBInjectedLambdaZipsBucket}/*'])])])]))])])]))])), ('AWSSBInjectedCopyZipsLambda', OrderedDict([('Type', 'AWS::Lambda::Function'), ('Properties', OrderedDict([('Description', 'Copies objects from a source S3 bucket to a destination'), ('Handler', 'index.handler'), ('Runtime', 'python2.7'), ('Role', '!GetAtt AWSSBInjectedCopyZipsRole.Arn'), ('Timeout', 240), ('Code', OrderedDict([('ZipFile', "import json\nimport logging\nimport threading\nimport boto3\nimport cfnresponse\n\n\ndef copy_objects(source_bucket, dest_bucket, prefix, objects):\n    s3 = boto3.client('s3')\n    for o in objects:\n        key = prefix + o\n        copy_source = {\n            'Bucket': source_bucket,\n            'Key': key\n        }\n        print('copy_source: %s' % copy_source)\n        print('dest_bucket = %s' % dest_bucket)\n        print('key = %s' % key)\n        s3.copy_object(CopySource=copy_source, Bucket=dest_bucket, Key=key)\n\n\ndef delete_objects(bucket, prefix, objects):\n    s3 = boto3.client('s3')\n    objects = {'Objects': [{'Key': prefix + o} for o in objects]}\n    s3.delete_objects(Bucket=bucket, Delete=objects)\n\n\ndef timeout(event, context):\n    logging.error('Execution is about to time out, sending failure response to CloudFormation')\n    cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)\n\n\ndef handler(event, context):\n    timer = threading.Timer((context.get_remaining_time_in_millis() / 1000.00) - 0.5, timeout, args=[event, context])\n    timer.start()\n    print('Received event: %s' % json.dumps(event))\n    status = cfnresponse.SUCCESS\n    try:\n        source_bucket = event['ResourceProperties']['SourceBucket']\n        dest_bucket = event['ResourceProperties']['DestBucket']\n        prefix = event['ResourceProperties']['Prefix']\n        objects = event['ResourceProperties']['Objects']\n        if event['RequestType'] == 'Delete':\n            delete_objects(dest_bucket, prefix, objects)\n        else:\n            copy_objects(source_bucket, dest_bucket, prefix, objects)\n    except Exception as e:\n        logging.error('Exception: %s' % e, exc_info=True)\n        status = cfnresponse.FAILED\n    finally:\n        timer.cancel()\n        cfnresponse.send(event, context, status, {}, None)\n")]))]))])), ('AWSSBInjectedGetCidrsRole', OrderedDict([('Condition', 'AutoCidrs'), ('Type', 'AWS::IAM::Role'), ('Properties', OrderedDict([('AssumeRolePolicyDocument', OrderedDict([('Version', '2012-10-17'), ('Statement', [OrderedDict([('Effect', 'Allow'), ('Principal', OrderedDict([('Service', ['lambda.amazonaws.com'])])), ('Action', ['sts:AssumeRole'])])])])), ('Path', '/'), ('Policies', [OrderedDict([('PolicyName', 'cfn_utility_get_cidrs'), ('PolicyDocument', OrderedDict([('Version', '2012-10-17'), ('Statement', [OrderedDict([('Effect', 'Allow'), ('Action', ['ec2:DescribeVpcs', 'ec2:DescribeSubnets', 'ec2:DescribeAvailabilityZones', 'logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents']), ('Resource', '*')])])]))])])]))])), ('AWSSBInjectedGetCidrsLambda', OrderedDict([('DependsOn', 'AWSSBInjectedCopyZips'), ('Condition', 'AutoCidrs'), ('Type', 'AWS::Lambda::Function'), ('Properties', OrderedDict([('Handler', 'lambda_function.handler'), ('Role', OrderedDict([('Fn::GetAtt', ['AWSSBInjectedGetCidrsRole', 'Arn'])])), ('Code', OrderedDict([('S3Bucket', '!Ref AWSSBInjectedLambdaZipsBucket'), ('S3Key', 'get_cidrs/lambda_function.zip')])), ('Runtime', 'python2.7'), ('Timeout', '60')]))])), ('AWSSBInjectedGetCidrs', OrderedDict([('Condition', 'AutoCidrs'), ('Type', 'AWS::CloudFormation::CustomResource'), ('Properties', OrderedDict([('ServiceToken', '!GetAtt AWSSBInjectedGetCidrsLambda.Arn'), ('Qty', '!Ref NumberOfAvailabilityZones'), ('VpcId', '!Ref VpcId'), ('CidrSize', '!Ref CidrSize')]))])), ('AWSSBInjectedGetAzsRole', OrderedDict([('Condition', 'AutoAzs'), ('Type', 'AWS::IAM::Role'), ('Properties', OrderedDict([('AssumeRolePolicyDocument', OrderedDict([('Version', '2012-10-17'), ('Statement', [OrderedDict([('Effect', 'Allow'), ('Principal', OrderedDict([('Service', ['lambda.amazonaws.com'])])), ('Action', ['sts:AssumeRole'])])])])), ('Path', '/'), ('Policies', [OrderedDict([('PolicyName', 'cfn_utility_get_cidrs'), ('PolicyDocument', OrderedDict([('Version', '2012-10-17'), ('Statement', [OrderedDict([('Effect', 'Allow'), ('Action', ['ec2:DescribeAvailabilityZones', 'logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents']), ('Resource', '*')])])]))])])]))])), ('AWSSBInjectedGetAzsLambda', OrderedDict([('DependsOn', 'AWSSBInjectedCopyZips'), ('Condition', 'AutoAzs'), ('Type', 'AWS::Lambda::Function'), ('Properties', OrderedDict([('Handler', 'lambda_function.handler'), ('Role', OrderedDict([('Fn::GetAtt', ['AWSSBInjectedGetAzsRole', 'Arn'])])), ('Code', OrderedDict([('S3Bucket', '!Ref AWSSBInjectedLambdaZipsBucket'), ('S3Key', 'get_azs/lambda_function.zip')])), ('Runtime', 'python2.7'), ('Timeout', '60')]))])), ('AWSSBInjectedGetAzs', OrderedDict([('Condition', 'AutoAzs'), ('Type', 'AWS::CloudFormation::CustomResource'), ('Properties', OrderedDict([('ServiceToken', '!GetAtt AWSSBInjectedGetAzsLambda.Arn'), ('Qty', '!Ref NumberOfAvailabilityZones')]))]))])), ('Outputs', OrderedDict([('SQSQueueUrl', OrderedDict([('Description', 'URL of newly created SQS Queue'), ('Value', '!Ref SQSQueue')])), ('SQSQueueArn', OrderedDict([('Description', 'ARN of newly created SQS Queue'), ('Value', '!GetAtt SQSQueue.Arn')])), ('SQSQueueName', OrderedDict([('Description', 'Name newly created SQS Queue'), ('Value', '!GetAtt SQSQueue.QueueName')])), ('SQSDeadLetterQueueUrl', OrderedDict([('Description', 'URL of the dead letter queue'), ('Value', OrderedDict([('!If', ['CreateDeadLetterQueue', '!Ref MyDeadLetterQueue', ''])]))])), ('SQSDeadLetterQueueArn', OrderedDict([('Description', 'ARN of the dead letter queue'), ('Value', OrderedDict([('!If', ['CreateDeadLetterQueue', '!GetAtt MyDeadLetterQueue.Arn', ''])]))])), ('TestAutoAz1', OrderedDict([('Description', '1stAz'), ('Value', OrderedDict([('!Select', [0, OrderedDict([('!If', ['AutoAzs', '!GetAtt AWSSBInjectedGetAzs.AvailabilityZones', '!Ref AvailabilityZones'])])])]))])), ('TestAutoCidr1', OrderedDict([('Description', '1stCidr'), ('Value', OrderedDict([('!Select', [0, OrderedDict([('!If', ['AutoCidrs', '!GetAtt AWSSBInjectedGetCidrs.CidrBlocks', '!Ref CidrBlocks'])])])]))])), ('UserKeyId', OrderedDict([('Value', '!GetAtt AWSSBInjectedIAMUserCreator.asb-access-key-id')])), ('UserSecretKey', OrderedDict([('Value', '!GetAtt AWSSBInjectedIAMUserCreator.asb-secret-access-key')]))]))])}




class Tests(unittest.TestCase):

    def test_build_artifacts(self):
        sb_pack = SbCfnPackage(os.path.dirname(os.path.abspath(__file__)) + "/../sample.yaml")
        outp = sb_pack.build_artifacts("test")
        print(outp)
        self.maxDiff = None
        self.assertEqual(sample_artifact, outp)

    def test_AwsServiceBrokerSpecException_multiple_errors(self):
        error = None
        try:
            raise AwsServiceBrokerSpecException(missing_key='some_key', incorrect_type=str)
        except Exception as e:
            error = e
        self.assertEqual(Exception, type(error))
        self.assertEqual(str(error), 'Cannot specify 2 error types in one exception')

    def test_AwsServiceBrokerSpecException_missing_key(self):
        error = None
        try:
            raise AwsServiceBrokerSpecException(missing_key='some_key')
        except Exception as e:
            error = e
        self.assertEqual(AwsServiceBrokerSpecException, type(error))
        self.assertEqual(str(error), 'The AWS Service broker specification requires a key at some_key')

    def test_AwsServiceBrokerSpecException_incorrect_type(self):
        error = None
        try:
            raise AwsServiceBrokerSpecException(incorrect_type='some_type')
        except Exception as e:
            error = e
        self.assertEqual(AwsServiceBrokerSpecException, type(error))
        self.assertEqual(str(error), 'AWS Service broker specification incorrect Type some_type')

    def test_incorrect_mapping_type(self):
        sb_spec = AwsServiceBrokerSpec('test')
        self.assertRaises(AwsServiceBrokerSpecException, sb_spec.get_mapping, key=None, key_type='garbage')

    def test_empty_list_mapping(self):
        sb_spec = AwsServiceBrokerSpec('test')
        self.assertEqual(None, sb_spec.get_mapping(key=[]))

    def test_reverse_mapping(self):
        sb_spec = AwsServiceBrokerSpec('test')
        self.assertEqual('Version', sb_spec.get_mapping(key='version', key_type='apb'))

    def test_no_iam_user_policy(self):
        sb_pack = SbCfnPackage(os.path.dirname(os.path.abspath(__file__)) + "/../sample.yaml")
        sb_pack.service_spec['Bindings']['IAM'].pop('Policies')
        outp = sb_pack.build_artifacts('test')['template']['Resources']['AWSSBInjectedIAMUserCreator']['Properties']
        self.assertEqual('PolicyArns' not in outp.keys(), True)

    def test_create_apb_skeleton(self):
        sb_pack = SbCfnPackage(os.path.dirname(os.path.abspath(__file__)) + "/../sample.yaml")
        artifacts = sb_pack.build_artifacts('test')
        results = sb_pack.create_apb_skeleton(artifacts['apb_spec'], artifacts['prescribed_parameters'], artifacts['bindings'], artifacts['template'], 'SQS')
        self.assertEqual(results.startswith('/tmp/AWSSB-'), True)

if __name__ == '__main__':
    unittest.main()
